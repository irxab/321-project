
Part3:

Trigger to update_player_count when a player added into the team:

CREATE TRIGGER update_team_count
AFTER INSERT ON Players
FOR EACH ROW
BEGIN
  UPDATE Teams
  SET player_count = (
    SELECT COUNT(*)
    FROM Players
    WHERE team_id = NEW.team_id
  )
  WHERE team_id = NEW.team_id;
END;


Part4:

Users

user_id (Primary Key)
username
password
role (Admin/Guest)

Tournaments

tournament_id (Primary Key)
tournament_name
start_date
End_date

Teams
team_id (Primary Key)
team_name
tournament_id (Foreign Key referencing Tournaments.tournament_id)
player_count

Players
player_id (Primary Key)
player_name
team_id (Foreign Key referencing Teams.team_id)

Captains

captain_id (Primary Key)
player_id (Foreign Key referencing Players.player_id)
team_id (Foreign Key referencing Teams.team_id)

Approvals

approval_id (Primary Key)
player_id (Foreign Key referencing Players.player_id)
team_id (Foreign Key referencing Teams.team_id)

Match_Results
result_id (Primary Key)
tournament_id (Foreign Key referencing Tournaments.tournament_id)
match_date
team1_id (Foreign Key referencing Teams.team_id)
team2_id (Foreign Key referencing Teams.team_id)
team1_score
Team2_score

Red_Cards

red_card_id (Primary Key)
player_id (Foreign Key referencing Players.player_id)
team_id (Foreign Key referencing Teams.team_id)


SQL Queries to create tables for the above data model
. 
CREATE TABLE Users (
  user_id INTEGER PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  password VARCHAR(50) NOT NULL,
  role TEXT CHECK(role IN ('Admin', 'Guest')) NOT NULL
);

CREATE TABLE UserSessions (
  session_id INTEGER PRIMARY KEY,
  user_id INTEGER NOT NULL,
  login_time TEXT NOT NULL,
  logout_time TEXT,
  FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Tournaments (
  tournament_id INTEGER PRIMARY KEY,
  tournament_name VARCHAR(50) NOT NULL,
  start_date TEXT NOT NULL,
  end_date TEXT NOT NULL
);

CREATE TABLE Teams (
  team_id INTEGER PRIMARY KEY,
  team_name VARCHAR(50) NOT NULL,
  tournament_id INTEGER,
  FOREIGN KEY (tournament_id) REFERENCES Tournaments(tournament_id)
);

CREATE TABLE Players (
  player_id INTEGER PRIMARY KEY,
  player_name VARCHAR(50) NOT NULL,
  team_id INTEGER,
  FOREIGN KEY (team_id) REFERENCES Teams(team_id)
);

CREATE TABLE Captains (
  captain_id INTEGER PRIMARY KEY,
  player_id INTEGER,
  team_id INTEGER,
  FOREIGN KEY (player_id) REFERENCES Players(player_id),
  FOREIGN KEY (team_id) REFERENCES Teams(team_id)
);

CREATE TABLE Approvals (
  approval_id INTEGER PRIMARY KEY,
  player_id INTEGER,
  team_id INTEGER,
  FOREIGN KEY (player_id) REFERENCES Players(player_id),
  FOREIGN KEY (team_id) REFERENCES Teams(team_id)
);

CREATE TABLE Match_Results (
  result_id INTEGER PRIMARY KEY,
  tournament_id INTEGER,
  match_date TEXT,
  team1_id INTEGER,
  team2_id INTEGER,
  team1_score INTEGER,
  team2_score INTEGER,
  FOREIGN KEY (tournament_id) REFERENCES Tournaments(tournament_id),
  FOREIGN KEY (team1_id) REFERENCES Teams(team_id),
  FOREIGN KEY (team2_id) REFERENCES Teams(team_id)
);

CREATE TABLE Red_Cards (
  red_card_id INTEGER PRIMARY KEY,
  player_id INTEGER,
  team_id INTEGER,
  FOREIGN KEY (player_id) REFERENCES Players(player_id),
  FOREIGN KEY (team_id) REFERENCES Teams(team_id)
);

Part5:

Implementation of the project with the following features:

Insert data into Users table

INSERT INTO Users (user_id, username, password, role)
VALUES (1, 'admin', 'adminpassword', 'Admin');

INSERT INTO Users (user_id, username, password, role)
VALUES (2, 'guest', 'guestpassword', 'Guest');
 Login
SELECT * FROM Users WHERE username = 'admin' AND password = 'adminpassword';

Functions of an Admin

Add a new tournament
INSERT INTO Tournaments (tournament_id, tournament_name, start_date, end_date)
VALUES (1, 'Tournament A', '2023-06-01', '2023-06-30');

Add a team to a tournament
INSERT INTO Teams (team_id, team_name, tournament_id)
VALUES (1, 'Team A', 1);

Select a captain for a team

INSERT INTO Captains (captain_id, player_id, team_id)
VALUES (1, 2, 1);
Add a player to the player table

INSERT INTO Players (player_id, player_name, team_id)
VALUES (4, 'Abdullah', 1);
Approve a player to join a team

INSERT INTO Approvals (approval_id, player_id, team_id)
VALUES (1, 3, 1);

Delete a tournament

DELETE FROM Tournaments WHERE tournament_id = 1;


Functions of a Guest

Browse all match results of a given tournament sorted by date
SELECT *
FROM Match_Results
WHERE tournament_id = 1
ORDER BY match_date;

Browse the player with the highest goal scored in all tournaments

SELECT p.player_id, p.player_name, SUM(mr.team1_score + mr.team2_score) AS total_goals
FROM Players p
JOIN Match_Results mr ON p.player_id = mr.team1_id OR p.player_id = mr.team2_id
GROUP BY p.player_id, p.player_name
ORDER BY total_goals DESC
LIMIT 1;

Browse players who received red cards in each team

SELECT t.team_id, t.team_name, p.player_id, p.player_name
FROM Teams t
JOIN Red_Cards rc ON t.team_id = rc.team_id
JOIN Players p ON rc.player_id = p.player_id;



Browse all members of a selected team (including manager, coach, captain, and players)

SELECT p.player_id, p.player_name
FROM Players p
JOIN Teams t ON p.team_id = t.team_id
WHERE t.team_id = 1
UNION
SELECT 0, 'Manager'
UNION
SELECT 0, 'Coach'
UNION
SELECT c.player_id, p.player_name
FROM Captains c
JOIN Players p ON c.player_id = p.player_id
WHERE c.team_id = 1;
